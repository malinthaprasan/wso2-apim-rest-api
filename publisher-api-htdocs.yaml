swagger: '2.0'
info:
  version: 0.9.0
  title: WSO2 API Manager - Publisher
  description: >
    This document specifies a **RESTful API** for WSO2 **API Manager**
    - Publisher.

    It is written with [swagger 2](http://swagger.io/).
  contact:
    name: WSO2
    url: 'http://wso2.com/products/api-manager/'
    email: architecture@wso2.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
schemes:
  - https
host: apis.wso2.com
basePath: /api/am/publisher/v0.9
consumes:
  - application/json
produces:
  - application/json
x-wso2-security:
  apim:
    x-wso2-scopes:
      - description: ''
        roles: admin
        name: 'apim:api_view'
        key: 'apim:api_view'
      - description: ''
        roles: admin
        name: 'apim:api_create'
        key: 'apim:api_create'
      - description: ''
        roles: admin
        name: 'apim:api_publish'
        key: 'apim:api_publish'
      - description: ''
        roles: admin
        name: 'apim:tier_view'
        key: 'apim:tier_view'
      - description: ''
        roles: admin
        name: 'apim:tier_manage'
        key: 'apim:tier_manage'
      - description: ''
        roles: admin
        name: 'apim:subscription_view'
        key: 'apim:subscription_view'
      - description: ''
        roles: admin
        name: 'apim:subscription_block'
        key: 'apim:subscription_block'
paths:
  /apis:
    get:
      x-scope: 'apim:api_view'
      summary: |
        Retrieving APIs
      description: |
        Get a list of available APIs qualifying under a given search condition.
      parameters:
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/offset'
        - name: query
          in: query
          description: >
            **Search condition**.



            You can search in attributes by using an **"attribute:"** modifier.



            Eg. "provider:wso2" will match an API if the provider of the API
            contains "wso2".



            Supported attribute modifiers are [**version, context, status,

            description, subcontext, doc, provider, tag **]



            If no advanced attribute modifier has been specified, search will
            match the

            given query string against API Name.
          type: string
        - $ref: '#/parameters/Accept'
        - $ref: '#/parameters/If-None-Match'
      tags:
        - APIs
      responses:
        '200':
          description: "OK. \nList of qualifying APIs is returned.\n"
          schema:
            $ref: '#/definitions/APIList'
          headers:
            Content-Type:
              description: The content type of the body.
              type: string
            ETag:
              description: >
                Entity Tag of the response resource. Used by caches, or in
                conditional requests.
              type: string
        '304':
          description: "Not Modified. \nEmpty body because the client has already the latest version of the requested resource.\n"
        '406':
          description: "Not Acceptable. \nThe requested media type is not supported\n"
          schema:
            $ref: '#/definitions/Error'
    post:
      x-scope: 'apim:api_create'
      summary: |
        Adding an API
      description: |
        Create a new API
      parameters:
        - in: body
          name: body
          description: |
            API object that needs to be added
          required: true
          schema:
            $ref: '#/definitions/API'
        - $ref: '#/parameters/Content-Type'
      tags:
        - APIs
      responses:
        '201':
          description: "Created. \nSuccessful response with the newly created object as entity in the body. \nLocation header contains URL of newly created entity.\n"
          schema:
            $ref: '#/definitions/API'
          headers:
            Location:
              description: |
                The URL of the newly created resource.
              type: string
            Content-Type:
              description: |
                The content type of the body.
              type: string
            ETag:
              description: >
                Entity Tag of the response resource. Used by caches, or in
                conditional request
              type: string
        '400':
          description: "Bad Request. \nInvalid request or validation error.\n"
          schema:
            $ref: '#/definitions/Error'
        '415':
          description: "Unsupported Media Type. \nThe entity of the request was in a not supported format.\n"
          schema:
            $ref: '#/definitions/Error'
  '/apis/{apiId}':
    get:
      x-scope: 'apim:api_view'
      description: |
        Get details of an API
      summary: |
        Retrieving an API
      parameters:
        - $ref: '#/parameters/apiId'
        - $ref: '#/parameters/Accept'
        - $ref: '#/parameters/If-None-Match'
        - $ref: '#/parameters/If-Modified-Since'
      tags:
        - API (individual)
      responses:
        '200':
          description: "OK. \nRequested API is returned\n"
          headers:
            Content-Type:
              description: |
                The content type of the body.
              type: string
            ETag:
              description: >
                Entity Tag of the response resource. Used by caches, or in
                conditional requests.
              type: string
            Last-Modified:
              description: "Date and time the resource has been modifed the last time. \nUsed by caches, or in conditional requests.\n"
              type: string
          schema:
            $ref: '#/definitions/API'
        '304':
          description: "Not Modified. \nEmpty body because the client has already the latest version of the requested resource.\n"
        '404':
          description: "Not Found. \nRequested API does not exist.\n"
          schema:
            $ref: '#/definitions/Error'
        '406':
          description: "Not Acceptable. \nThe requested media type is not supported\n"
          schema:
            $ref: '#/definitions/Error'
    put:
      x-scope: 'apim:api_create'
      description: |
        Update an existing API
      summary: |
        Updating an API
      parameters:
        - $ref: '#/parameters/apiId'
        - in: body
          name: body
          description: |
            API object that needs to be added
          required: true
          schema:
            $ref: '#/definitions/API'
        - $ref: '#/parameters/Content-Type'
        - $ref: '#/parameters/If-Match'
        - $ref: '#/parameters/If-Unmodified-Since'
      tags:
        - API (individual)
      responses:
        '200':
          description: "OK. \nSuccessful response with updated API object\n"
          schema:
            $ref: '#/definitions/API'
          headers:
            Location:
              description: |
                The URL of the newly created resource.
              type: string
            Content-Type:
              description: |
                The content type of the body.
              type: string
            ETag:
              description: >
                Entity Tag of the response resource. Used by caches, or in
                conditional request.
              type: string
            Last-Modified:
              description: "Date and time the resource has been modifed the last time. \nUsed by caches, or in conditional requests.\n"
              type: string
        '400':
          description: "Bad Request. \nInvalid request or validation error\n"
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: "Forbidden. \nThe request must be conditional but no condition has been specified.\n"
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: "Not Found. \nThe resource to be updated does not exist.\n"
          schema:
            $ref: '#/definitions/Error'
        '412':
          description: "Precondition Failed. \nThe request has not been performed because one of the preconditions is not met.\n"
          schema:
            $ref: '#/definitions/Error'
    delete:
      x-scope: 'apim:api_create'
      description: |
        Delete an existing API
      summary: |
        Deleting an API
      parameters:
        - $ref: '#/parameters/apiId'
        - $ref: '#/parameters/If-Match'
        - $ref: '#/parameters/If-Unmodified-Since'
      tags:
        - API (individual)
      responses:
        '200':
          description: "OK. \nResource successfully deleted.\n"
        '403':
          description: "Forbidden. \nThe request must be conditional but no condition has been specified.\n"
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: "Not Found. \nResource to be deleted does not exist.\n"
          schema:
            $ref: '#/definitions/Error'
        '412':
          description: "Precondition Failed. \nThe request has not been performed because one of the preconditions is not met.\n"
          schema:
            $ref: '#/definitions/Error'
  '/apis/{apiId}/swagger':
    get:
      x-scope: 'apim:api_view'
      description: |
        Get the swagger of an API
      summary: |
        Retrieving definition of an API
      parameters:
        - $ref: '#/parameters/apiId'
        - $ref: '#/parameters/Accept'
        - $ref: '#/parameters/If-None-Match'
        - $ref: '#/parameters/If-Modified-Since'
      tags:
        - API Swagger
      responses:
        '200':
          description: "OK. \nRequested swagger document of the API is returned\n"
          headers:
            Content-Type:
              description: |
                The content type of the body.
              type: string
            ETag:
              description: >
                Entity Tag of the response resource. Used by caches, or in
                conditional requests.
              type: string
            Last-Modified:
              description: "Date and time the resource has been modifed the last time. \nUsed by caches, or in conditional requests.\n"
              type: string
        '304':
          description: "Not Modified. \nEmpty body because the client has already the latest version of the requested resource.\n"
        '404':
          description: "Not Found. \nRequested API does not exist.\n"
          schema:
            $ref: '#/definitions/Error'
        '406':
          description: "Not Acceptable. \nThe requested media type is not supported\n"
          schema:
            $ref: '#/definitions/Error'
    put:
      consumes:
        - multipart/form-data
      x-scope: 'apim:api_create'
      description: |
        Update an existing swagger definition of an API
      summary: |
        Updating definition of an API
      parameters:
        - $ref: '#/parameters/apiId'
        - in: formData
          name: apiDefinition
          description: Swagger definition of the API
          type: string
          required: true
        - $ref: '#/parameters/Content-Type'
        - $ref: '#/parameters/If-Match'
        - $ref: '#/parameters/If-Unmodified-Since'
      tags:
        - API Swagger
      responses:
        '200':
          description: "OK. \nSuccessful response with updated Swagger definition\n"
          headers:
            Location:
              description: |
                The URL of the newly created resource.
              type: string
            Content-Type:
              description: |
                The content type of the body.
              type: string
            ETag:
              description: >
                Entity Tag of the response resource. Used by caches, or in
                conditional request.
              type: string
            Last-Modified:
              description: "Date and time the resource has been modifed the last time. \nUsed by caches, or in conditional requests.\n"
              type: string
        '400':
          description: "Bad Request. \nInvalid request or validation error\n"
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: "Forbidden. \nThe request must be conditional but no condition has been specified.\n"
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: "Not Found. \nThe resource to be updated does not exist.\n"
          schema:
            $ref: '#/definitions/Error'
        '412':
          description: "Precondition Failed. \nThe request has not been performed because one of the preconditions is not met.\n"
          schema:
            $ref: '#/definitions/Error'
  /apis/copy-api:
    post:
      x-scope: 'apim:api_create'
      description: |
        Create a new API by copying an existing API
      summary: |
        Copying an API
      parameters:
        - name: newVersion
          description: Version of the new API.
          type: string
          in: query
          required: true
        - $ref: '#/parameters/apiId-Q'
      tags:
        - API (individual)
      responses:
        '201':
          description: "Created. \nSuccessful response with the newly created API as entity in the body. Location header contains URL of newly created API.\n"
          headers:
            Location:
              description: |
                The URL of the newly created API.
              type: string
        '400':
          description: "Bad Request. \nInvalid request or validation error\n"
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: "Not Found. \nAPI to copy does not exist.\n"
          schema:
            $ref: '#/definitions/Error'
  /apis/change-lifecycle:
    post:
      x-scope: 'apim:api_publish'
      description: |
        Change the lifecycle of an API
      summary: |
        Changing the lifecycle of an API
      parameters:
        - name: action
          description: >
            The action to demote or promote the state of the API.



            Supported actions are [ **Publish, Deploy as a Prototype, Demote to
            Created, Demote to Prototyped, Block, Deprecate, Re-Publish, Retire
            **]
          in: query
          type: string
          required: true
          enum:
            - Publish
            - Deploy as a Prototype
            - Demote to Created
            - Demote to Prototyped
            - Block
            - Deprecate
            - Re-Publish
            - Retire
        - name: lifecycleChecklist
          description: "\nYou can specify additional checklist items by using an **\"attribute:\"** modifier.\n\nEg: \"Deprecate Old Versions:true\" will deprecate older versions of a particular API when it is promoted to \nPublished state from Created state. Multiple checklist items can be given in \"attribute1:true, attribute2:false\"\nformat.\n\nSupported checklist items are as follows.\n1. **Deprecate Old Versions**: Setting this to true will deprecate older versions of a particular API when it is promoted to Published state from Created state.\n2. **Require Re-Subscription**: If you set this to true, users need to re subscribe to the API although they may have subscribed to an older version.\n"
          type: string
          in: query
        - $ref: '#/parameters/apiId-Q'
        - $ref: '#/parameters/If-Match'
        - $ref: '#/parameters/If-Unmodified-Since'
      tags:
        - API (individual)
      responses:
        '200':
          description: "OK. \nLifecycle changed successfully.\n"
          headers:
            ETag:
              description: >
                Entity Tag of the changed API. Used by caches, or in conditional
                request.
              type: string
            Last-Modified:
              description: "Date and time the API lifecycle has been modified the last time. \nUsed by caches, or in conditional requests.\n"
              type: string
        '400':
          description: "Bad Request. \nInvalid request or validation error\n"
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: "Not Found. \nRequested API does not exist.\n"
          schema:
            $ref: '#/definitions/Error'
        '412':
          description: "Precondition Failed. \nThe request has not been performed because one of the preconditions is not met.\n"
          schema:
            $ref: '#/definitions/Error'
  '/apis/{apiId}/documents':
    get:
      x-scope: 'apim:api_view'
      description: |
        Get a list of documents belonging to an API.
      summary: |
        Retriving documents of an API
      parameters:
        - $ref: '#/parameters/apiId'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/Accept'
        - $ref: '#/parameters/If-None-Match'
      tags:
        - API Document (individual)
      responses:
        '200':
          description: "OK. \nDocument list is returned.\n"
          schema:
            $ref: '#/definitions/DocumentList'
          headers:
            Content-Type:
              description: |
                The content type of the body.
              type: string
            ETag:
              description: >
                Entity Tag of the response resource. Used by caches, or in
                conditional requests.
              type: string
        '304':
          description: "Not Modified. \nEmpty body because the client has already the latest version of the requested resource.\n"
        '404':
          description: "Not Found. \nRequested API does not exist.\n"
          schema:
            $ref: '#/definitions/Error'
        '406':
          description: "Not Acceptable. \nThe requested media type is not supported\n"
          schema:
            $ref: '#/definitions/Error'
    post:
      x-scope: 'apim:api_create'
      description: |
        Add a new document to an API
      summary: |
        Adding a document to an API
      parameters:
        - $ref: '#/parameters/apiId'
        - in: body
          name: body
          description: |
            Document object that needs to be added
          required: true
          schema:
            $ref: '#/definitions/Document'
        - $ref: '#/parameters/Content-Type'
      tags:
        - API Document (individual)
      responses:
        '201':
          description: "Created. \nSuccessful response with the newly created Document object as entity in the body. \nLocation header contains URL of newly added document.\n"
          schema:
            $ref: '#/definitions/Document'
          headers:
            Location:
              description: |
                Location to the newly created Document.
              type: string
            Content-Type:
              description: |
                The content type of the body.
              type: string
            ETag:
              description: "Entity Tag of the response resource. \nUsed by caches, or in conditional request.\n"
              type: string
        '400':
          description: "Bad Request. \nInvalid request or validation error\n"
          schema:
            $ref: '#/definitions/Error'
        '415':
          description: "Unsupported media type. \nThe entity of the request was in a not supported format.\n"
  '/apis/{apiId}/documents/{documentId}':
    get:
      x-scope: 'apim:api_view'
      description: |
        Get a particular document associated with an API.
      summary: |
        Retriving a document of an API
      parameters:
        - $ref: '#/parameters/apiId'
        - $ref: '#/parameters/documentId'
        - $ref: '#/parameters/Accept'
        - $ref: '#/parameters/If-None-Match'
        - $ref: '#/parameters/If-Modified-Since'
      tags:
        - API Document
      responses:
        '200':
          description: "OK. \nDocument returned.\n"
          schema:
            $ref: '#/definitions/Document'
          headers:
            Content-Type:
              description: |
                The content type of the body.
              type: string
            ETag:
              description: |
                Entity Tag of the response resource.
                Used by caches, or in conditional requests.
              type: string
            Last-Modified:
              description: "Date and time the resource has been modifed the last time. \nUsed by caches, or in conditional reuquests.\n"
              type: string
        '304':
          description: "Not Modified. \nEmpty body because the client has already the latest version of the requested resource.\n"
        '404':
          description: "Not Found. \nRequested Document does not exist.\n"
          schema:
            $ref: '#/definitions/Error'
        '406':
          description: "Not Acceptable. \nThe requested media type is not supported\n"
          schema:
            $ref: '#/definitions/Error'
    put:
      x-scope: 'apim:api_create'
      description: |
        Update document details.
      summary: |
        Updating a document of an API
      parameters:
        - $ref: '#/parameters/apiId'
        - $ref: '#/parameters/documentId'
        - in: body
          name: body
          description: |
            Document object that needs to be added
          required: true
          schema:
            $ref: '#/definitions/Document'
        - $ref: '#/parameters/Content-Type'
        - $ref: '#/parameters/If-Match'
        - $ref: '#/parameters/If-Unmodified-Since'
      tags:
        - API Document
      responses:
        '200':
          description: "OK. \nDocument updated\n"
          schema:
            $ref: '#/definitions/Document'
          headers:
            Location:
              description: |
                The URL of the updated document.
              type: string
            Content-Type:
              description: |
                The content type of the body.
              type: string
            ETag:
              description: "Entity Tag of the response resource. \nUsed by caches, or in conditional request.\n"
              type: string
            Last-Modified:
              description: "Date and time the resource has been modifed the last time. \nUsed by caches, or in conditional reuquests.\n"
              type: string
        '400':
          description: "Bad Request. \nInvalid request or validation error.\n"
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: "Not Found. \nThe resource to be updated does not exist.\n"
          schema:
            $ref: '#/definitions/Error'
        '412':
          description: "Precondition Failed. \nThe request has not been performed because one of the preconditions is not met.\n"
          schema:
            $ref: '#/definitions/Error'
    delete:
      x-scope: 'apim:api_create'
      description: |
        Delete a document of an API
      summary: |
        Deleting a document of an API
      parameters:
        - $ref: '#/parameters/apiId'
        - $ref: '#/parameters/documentId'
        - $ref: '#/parameters/If-Match'
        - $ref: '#/parameters/If-Unmodified-Since'
      tags:
        - API Document
      responses:
        '200':
          description: "OK. \nResource successfully deleted.\n"
        '404':
          description: "Not Found. \nResource to be deleted does not exist.\n"
          schema:
            $ref: '#/definitions/Error'
        '412':
          description: "Precondition Failed. \nThe request has not been performed because one of the preconditions is not met.\n"
          schema:
            $ref: '#/definitions/Error'
  '/apis/{apiId}/documents/{documentId}/content':
    get:
      x-scope: 'apim:api_view'
      description: >
        Downloads a FILE type document/get the inline content or source url of
        a certain document.
      summary: |
        Retriving an API document content
      parameters:
        - $ref: '#/parameters/apiId'
        - $ref: '#/parameters/documentId'
        - $ref: '#/parameters/Accept'
        - $ref: '#/parameters/If-None-Match'
        - $ref: '#/parameters/If-Modified-Since'
      tags:
        - API Document
      responses:
        '200':
          description: "OK. \nFile or inline content returned.\n"
          headers:
            Content-Type:
              description: |
                The content type of the body.
              type: string
            ETag:
              description: |
                Entity Tag of the response resource.
                Used by caches, or in conditional requests.
              type: string
            Last-Modified:
              description: "Date and time the resource has been modifed the last time. \nUsed by caches, or in conditional reuquests.\n"
              type: string
        '303':
          description: >
            See Other.

            Source can be retrived from the URL specified at the Location
            header.
          headers:
            Location:
              description: |
                The Source URL of the document.
              type: string
        '304':
          description: "Not Modified. \nEmpty body because the client has already the latest version of the requested resource.\n"
        '404':
          description: "Not Found. \nRequested Document does not exist.\n"
          schema:
            $ref: '#/definitions/Error'
        '406':
          description: "Not Acceptable. \nThe requested media type is not supported\n"
          schema:
            $ref: '#/definitions/Error'
    post:
      consumes:
        - multipart/form-data
      x-scope: 'apim:api_create'
      description: >
        Upload a file to a document or add inline content to the document.



        Document's source type should be **FILE** in order to upload a file to
        the document using **file** parameter.

        Document's source type should be **INLINE** in order to add inline
        content to the document using **inlineContent** parameter.



        Only one of **file** or **inlineContent** can be specified at one time.
      summary: |
        Uploading an API document content
      parameters:
        - $ref: '#/parameters/apiId'
        - $ref: '#/parameters/documentId'
        - in: formData
          name: file
          description: Document to upload
          type: file
          required: false
        - in: formData
          name: inlineContent
          description: Inline content of the document
          type: string
          required: false
        - $ref: '#/parameters/Content-Type'
        - $ref: '#/parameters/If-Match'
        - $ref: '#/parameters/If-Unmodified-Since'
      tags:
        - API Document
      responses:
        '200':
          description: "OK. \nDocument updated\n"
          schema:
            $ref: '#/definitions/Document'
          headers:
            Location:
              description: |
                The URL of the updated content of the document.
              type: string
            Content-Type:
              description: |
                The content type of the body.
              type: string
            ETag:
              description: "Entity Tag of the response resource. \nUsed by caches, or in conditional request.\n"
              type: string
            Last-Modified:
              description: "Date and time the resource has been modifed the last time. \nUsed by caches, or in conditional reuquests.\n"
              type: string
        '400':
          description: "Bad Request. \nInvalid request or validation error.\n"
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: "Not Found. \nThe resource to be updated does not exist.\n"
          schema:
            $ref: '#/definitions/Error'
        '412':
          description: "Precondition Failed. \nThe request has not been performed because one of the preconditions is not met.\n"
          schema:
            $ref: '#/definitions/Error'
  '/applications/{applicationId}':
    get:
      x-scope: 'apim:api_create'
      description: |
        Get application details
      summary: |
        Retrieving an application
      parameters:
        - $ref: '#/parameters/applicationId'
        - $ref: '#/parameters/Accept'
        - $ref: '#/parameters/If-None-Match'
        - $ref: '#/parameters/If-Modified-Since'
      tags:
        - Application (individual)
      responses:
        '200':
          description: "OK. \nApplication returned.\n"
          schema:
            $ref: '#/definitions/Application'
          headers:
            Content-Type:
              description: |
                The content type of the body.
              type: string
            ETag:
              description: >
                Entity Tag of the response resource. Used by caches, or in
                conditional requests.
              type: string
            Last-Modified:
              description: "Date and time the resource has been modifed the last time. \nUsed by caches, or in conditional reuquests.\n"
              type: string
        '304':
          description: "Not Modified. \nEmpty body because the client has already the latest version of the requested resource.\n"
        '404':
          description: |
            Not Found.
            Requested application does not exist.
          schema:
            $ref: '#/definitions/Error'
        '406':
          description: "Not Acceptable. \nThe requested media type is not supported\n"
          schema:
            $ref: '#/definitions/Error'
  /subscriptions:
    get:
      x-scope: 'apim:subscription_view'
      description: >
        Get subscription list.

        The API Identifier and corresponding Application Identifier

        the subscriptions of which are to be returned are passed as parameters.
      summary: |
        Retrieving subscriptions
      parameters:
        - $ref: '#/parameters/apiId-Q'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/Accept'
        - $ref: '#/parameters/If-None-Match'
      tags:
        - Subscription Collection
      responses:
        '200':
          description: "OK. \nSubscription list returned.\n"
          schema:
            $ref: '#/definitions/SubscriptionList'
          headers:
            Content-Type:
              description: |
                The content type of the body.
              type: string
            ETag:
              description: "Entity Tag of the response resource. \nUsed by caches, or in conditional requests.\n"
              type: string
        '304':
          description: "Not Modified. \nEmpty body because the client has already the latest version of the requested resource.\n"
        '406':
          description: |
            Not Acceptable. The requested media type is not supported
          schema:
            $ref: '#/definitions/Error'
  '/subscriptions/{subscriptionId}':
    get:
      x-scope: 'apim:subscription_view'
      description: |
        Get subscription details
      parameters:
        - $ref: '#/parameters/subscriptionId'
        - $ref: '#/parameters/Accept'
        - $ref: '#/parameters/If-None-Match'
        - $ref: '#/parameters/If-Modified-Since'
      summary: |
        Retrieving a subscription
      tags:
        - Subscription (individual)
      responses:
        '200':
          description: "OK. \nSubscription returned\n"
          schema:
            $ref: '#/definitions/Subscription'
          headers:
            Content-Type:
              description: The content type of the body.
              type: string
            ETag:
              description: 'Entity Tag of the response resource. Used by caches, or in conditional requests.'
              type: string
            Last-Modified:
              description: 'Date and time the resource has been modifed the last time. Used by caches, or in conditional reuquests.'
              type: string
        '304':
          description: "Not Modified. \nEmpty body because the client has already the latest version of the requested resource.\n"
        '404':
          description: "Not Found. \nRequested Subscription does not exist.\n"
          schema:
            $ref: '#/definitions/Error'
  /subscriptions/block-subscription:
    post:
      x-scope: 'apim:subscription_block'
      parameters:
        - $ref: '#/parameters/subscriptionId-Q'
        - name: blockState
          in: query
          description: |
            Subscription block state.
          type: string
          required: true
          enum:
            - BLOCKED
            - PROD_ONLY_BLOCKED
        - $ref: '#/parameters/If-Match'
        - $ref: '#/parameters/If-Unmodified-Since'
      description: |
        Block a subscription.
      summary: |
        Blocking a subscription
      tags:
        - Subscription (individual)
      responses:
        '200':
          description: "OK. \nSubscription was blocked successfully.\n"
          headers:
            ETag:
              description: "Entity Tag of the blocked subscription. \nUsed by caches, or in conditional request.\n"
              type: string
            Last-Modified:
              description: "Date and time the subscription has been blocked. \nUsed by caches, or in conditional requests.\n"
              type: string
        '400':
          description: "Bad Request. \nInvalid request or validation error\n"
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: "Not Found. \nRequested subscription does not exist.\n"
          schema:
            $ref: '#/definitions/Error'
        '412':
          description: "Precondition Failed. \nThe request has not been performed because one of the preconditions is not met.\n"
          schema:
            $ref: '#/definitions/Error'
  /subscriptions/unblock-subscription:
    post:
      x-scope: 'apim:subscription_block'
      parameters:
        - $ref: '#/parameters/subscriptionId-Q'
        - $ref: '#/parameters/If-Match'
        - $ref: '#/parameters/If-Unmodified-Since'
      description: |
        Unblock a subscription.
      summary: |
        Unblocking a subscription
      tags:
        - Subscription (individual)
      responses:
        '200':
          description: "OK. \nSubscription was unblocked successfully.\n"
          headers:
            ETag:
              description: "Entity Tag of the unblocked subscription. \nUsed by caches, or in conditional request.\n"
              type: string
            Last-Modified:
              description: "Date and time the subscription has been unblocked. \nUsed by caches, or in conditional requests.\n"
              type: string
        '400':
          description: "Bad Request. \nInvalid request or validation error\n"
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: "Not Found. \nRequested subscription does not exist.\n"
          schema:
            $ref: '#/definitions/Error'
        '412':
          description: "Precondition Failed. \nThe request has not been performed because one of the preconditions is not met.\n"
          schema:
            $ref: '#/definitions/Error'
  '/tiers/{tierLevel}':
    get:
      x-scope: 'apim:tier_view'
      description: |
        Get available tiers
      summary: |
        Retriving tiers
      parameters:
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/tierLevel'
        - $ref: '#/parameters/Accept'
        - $ref: '#/parameters/If-None-Match'
      tags:
        - Tier Collection
      responses:
        '200':
          description: "OK. \nList of tiers returned.\n"
          schema:
            $ref: '#/definitions/TierList'
          headers:
            Content-Type:
              description: The content type of the body.
              type: string
            ETag:
              description: "Entity Tag of the response resource. \nUsed by caches, or in conditional requests.\n"
              type: string
        '304':
          description: "Not Modified. \nEmpty body because the client has already the latest version of the requested resource.\n"
        '406':
          description: "Not Acceptable. \nThe requested media type is not supported\n"
          schema:
            $ref: '#/definitions/Error'
    post:
      x-scope: 'apim:tier_manage'
      description: |
        Add a new tier
      summary: |
        Adding a tier
      parameters:
        - in: body
          name: body
          description: |
            Tier object that should to be added
          required: true
          schema:
            $ref: '#/definitions/Tier'
        - $ref: '#/parameters/tierLevel'
        - $ref: '#/parameters/Content-Type'
      tags:
        - Tier
      responses:
        '201':
          description: "Created. \nSuccessful response with the newly created object as entity in the body. \nLocation header contains URL of newly created entity.\n"
          schema:
            $ref: '#/definitions/Tier'
          headers:
            Location:
              description: |
                Location of the newly created tier.
              type: string
            Content-Type:
              description: |
                The content type of the body.
              type: string
            ETag:
              description: "Entity Tag of the response resource. \nUsed by caches, or in conditional request'\n"
              type: string
        '400':
          description: "Bad Request. \nInvalid request or validation error\n"
          schema:
            $ref: '#/definitions/Error'
        '415':
          description: "Unsupported media type. \nThe entity of the request was in a not supported format.\n"
  '/tiers/{tierLevel}/{tierName}':
    get:
      x-scope: 'apim:tier_view'
      description: |
        Get tier details
      summary: |
        Retriving a tier
      parameters:
        - $ref: '#/parameters/tierName'
        - $ref: '#/parameters/tierLevel'
        - $ref: '#/parameters/Accept'
        - $ref: '#/parameters/If-None-Match'
        - $ref: '#/parameters/If-Modified-Since'
      tags:
        - Tier
      responses:
        '200':
          description: "OK. \nTier returned\n"
          schema:
            $ref: '#/definitions/Tier'
          headers:
            Content-Type:
              description: |
                The content type of the body.
              type: string
            ETag:
              description: "Entity Tag of the response resource. \nUsed by caches, or in conditional requests.\n"
              type: string
            Last-Modified:
              description: "Date and time the resource has been modifed the last time. \nUsed by caches, or in conditional reuquests.\n"
              type: string
        '304':
          description: "Not Modified. \nEmpty body because the client has already the latest version of the requested resource.\n"
        '404':
          description: "Not Found. \nRequested Tier does not exist.\n"
          schema:
            $ref: '#/definitions/Error'
        '406':
          description: "Not Acceptable. \nThe requested media type is not supported.\n"
          schema:
            $ref: '#/definitions/Error'
    put:
      x-scope: 'apim:tier_manage'
      description: |
        Update tier details
      summary: |
        Updating a tier
      parameters:
        - $ref: '#/parameters/tierName'
        - in: body
          name: body
          description: |
            Tier object that needs to be modified
          required: true
          schema:
            $ref: '#/definitions/Tier'
        - $ref: '#/parameters/tierLevel'
        - $ref: '#/parameters/Content-Type'
        - $ref: '#/parameters/If-Match'
        - $ref: '#/parameters/If-Unmodified-Since'
      tags:
        - Tier
      responses:
        '200':
          description: "OK. \nSubscription updated.\n"
          schema:
            $ref: '#/definitions/Tier'
          headers:
            Location:
              description: |
                The URL of the newly created resource.
              type: string
            Content-Type:
              description: |
                The content type of the body.
              type: string
            ETag:
              description: "Entity Tag of the response resource. \nUsed by caches, or in conditional request.\n"
              type: string
            Last-Modified:
              description: "Date and time the resource has been modifed the last time. \nUsed by caches, or in conditional reuquests.\n"
              type: string
        '400':
          description: "Bad Request. \nInvalid request or validation error.\n"
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: "Not Found. \nThe resource to be updated does not exist.\n"
          schema:
            $ref: '#/definitions/Error'
        '412':
          description: "Precondition Failed. \nThe request has not been performed because one of the preconditions is not met.\n"
          schema:
            $ref: '#/definitions/Error'
    delete:
      x-scope: 'apim:tier_manage'
      description: |
        Remove a tier
      summary: |
        Removing a tier
      parameters:
        - $ref: '#/parameters/tierName'
        - $ref: '#/parameters/tierLevel'
        - $ref: '#/parameters/If-Match'
        - $ref: '#/parameters/If-Unmodified-Since'
      tags:
        - Tier
      responses:
        '200':
          description: "OK. \nResource successfully deleted.\n"
        '404':
          description: "Not Found. \nResource to be deleted does not exist.\n"
          schema:
            $ref: '#/definitions/Error'
        '412':
          description: "Precondition Failed. \nThe request has not been performed because one of the preconditions is not met.\n"
          schema:
            $ref: '#/definitions/Error'
  /tiers/update-permission:
    post:
      x-scope: 'apim:tier_manage'
      description: |
        Update tier permission
      summary: |
        Updating tier permission
      parameters:
        - $ref: '#/parameters/tierName-Q'
        - $ref: '#/parameters/tierLevel-Q'
        - $ref: '#/parameters/If-Match'
        - $ref: '#/parameters/If-Unmodified-Since'
        - in: body
          name: permissions
          schema:
            $ref: '#/definitions/TierPermission'
      tags:
        - Tier Permission
      responses:
        '200':
          description: "OK. \nSuccessfully updated tier permissions\n"
          schema:
            type: array
            items:
              $ref: '#/definitions/Tier'
          headers:
            ETag:
              description: |
                Entity Tag of the modified tier.
                 Used by caches, or in conditional request.
              type: string
            Last-Modified:
              description: "Date and time the tier has been modified. \nUsed by caches, or in conditional requests.\n"
              type: string
        '400':
          description: "Bad Request. \nInvalid request or validation error.\n"
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: "Forbidden. \nThe request must be conditional but no condition has been specified.\n"
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: "Not Found. \nRequested tier does not exist.\n"
          schema:
            $ref: '#/definitions/Error'
        '412':
          description: "Precondition Failed. \nThe request has not been performed because one of the preconditions is not met.\n"
          schema:
            $ref: '#/definitions/Error'
  /environments:
    get:
      x-scope: 'apim:api_view'
      description: |
        Get a list of gateway environments configured previously.
      summary: |
        Retriving gateway environments
      parameters:
        - in: query
          name: apiId
          description: |
            Will return environment list for the provided API.
          type: string
      tags:
        - Environment Collection
      responses:
        '200':
          description: "OK. \nEnvironment list is returned.\n"
          schema:
            $ref: '#/definitions/EnvironmentList'
          headers:
            Content-Type:
              description: |
                The content type of the body.
              type: string
            ETag:
              description: "Entity Tag of the response resource. \nUsed by caches, or in conditional requests.\n"
              type: string
        '304':
          description: "Not Modified. \nEmpty body because the client has already the latest version of the requested resource.\n"
        '404':
          description: "Not Found. \nRequested API does not exist.\n"
          schema:
            $ref: '#/definitions/Error'
parameters:
  apiId:
    name: apiId
    in: path
    description: "**API ID** consisting of the **UUID** of the API. \nThe combination of the provider of the API, name of the API and the version is also accepted as a valid API ID.\nShould be formatted as **provider-name-version**.\n"
    required: true
    type: string
  apiId-Q:
    name: apiId
    in: query
    description: "**API ID** consisting of the **UUID** of the API. \nThe combination of the provider of the API, name of the API and the version is also accepted as a valid API I.\nShould be formatted as **provider-name-version**.\n"
    required: true
    type: string
  documentId:
    name: documentId
    in: path
    description: |
      **Document Identifier**
    required: true
    type: string
  applicationId:
    name: applicationId
    in: path
    description: |
      **Application Identifier** consisting of the UUID of the Application.
    required: true
    type: string
  subscriptionId:
    name: subscriptionId
    in: path
    description: |
      Subscription Id
    required: true
    type: string
  subscriptionId-Q:
    name: subscriptionId
    in: query
    description: |
      Subscription Id
    required: true
    type: string
  tierName:
    name: tierName
    in: path
    description: |
      Tier name
    required: true
    type: string
  tierName-Q:
    name: tierName
    in: query
    description: |
      Name of the tier
    required: true
    type: string
  tierLevel:
    name: tierLevel
    in: path
    description: |
      List API or Application or Resource type tiers.
    type: string
    enum:
      - api
      - application
      - resource
    required: true
  tierLevel-Q:
    name: tierLevel
    in: query
    description: |
      List API or Application or Resource type tiers.
    type: string
    enum:
      - api
      - application
      - resource
    required: true
  limit:
    name: limit
    in: query
    description: |
      Maximum size of resource array to return.
    default: 25
    type: integer
  offset:
    name: offset
    in: query
    description: "Starting point within the complete list of items qualified.  \n"
    default: 0
    type: integer
  Accept:
    name: Accept
    in: header
    description: |
      Media types acceptable for the response. Default is JSON.
    default: JSON
    type: string
  Content-Type:
    name: Content-Type
    in: header
    description: |
      Media type of the entity in the body. Default is JSON.
    default: JSON
    required: true
    type: string
  If-None-Match:
    name: If-None-Match
    in: header
    description: >
      Validator for conditional requests; based on the ETag of the formerly
      retrieved

      variant of the resourec.
    type: string
  If-Modified-Since:
    name: If-Modified-Since
    in: header
    description: "Validator for conditional requests; based on Last Modified header of the \nformerly retrieved variant of the resource.\n"
    type: string
  If-Match:
    name: If-Match
    in: header
    description: |
      Validator for conditional requests; based on ETag.
    type: string
  If-Unmodified-Since:
    name: If-Unmodified-Since
    in: header
    description: |
      Validator for conditional requests; based on Last Modified header.
    type: string
definitions:
  APIList:
    title: API List
    properties:
      count:
        type: integer
        description: |
          Number of APIs returned.
        example: 1
      next:
        type: string
        description: "Link to the next subset of resources qualified. \nEmpty if no more resources are to be returned.\n"
        example: '/apis?limit=1&offset=2&query='
      previous:
        type: string
        description: "Link to the previous subset of resources qualified. \nEmpty if current subset is the first subset returned.\n"
        example: '/apis?limit=1&offset=0&query='
      list:
        type: array
        items:
          $ref: '#/definitions/APIInfo'
  APIInfo:
    title: API Info object with basic API details.
    properties:
      id:
        type: string
        example: 01234567-0123-0123-0123-012345678901
      name:
        type: string
        example: CalculatorAPI
      description:
        type: string
        example: A calculator API that supports basic operations
      context:
        type: string
        example: CalculatorAPI
      version:
        type: string
        example: 1.0.0
      provider:
        description: >
          If the provider value is not given, the user invoking the API will be
          used as the provider.
        type: string
        example: admin
      status:
        type: string
        example: CREATED
  API:
    title: API object
    required:
      - name
      - context
      - version
      - apiDefinition
      - tiers
      - isDefaultVersion
      - transport
      - endpointConfig
      - visibility
    properties:
      id:
        type: string
        description: |
          UUID of the api registry artifact
        example: 01234567-0123-0123-0123-012345678901
      name:
        type: string
        example: CalculatorAPI
      description:
        type: string
        example: A calculator API that supports basic operations
      context:
        type: string
        example: CalculatorAPI
      version:
        type: string
        example: 1.0.0
      provider:
        description: >
          If the provider value is not given user invoking the api will be used
          as the provider.
        type: string
        example: admin
      apiDefinition:
        description: >
          Swagger definition of the API which contains details about URI
          templates and scopes
        type: string
        example: "{\"paths\":{\"\\/substract\":{\"get\":{\"x-auth-type\":\"Application & Application User\",\"x-throttling-tier\":\"Unlimited\",\"parameters\":[{\"name\":\"x\",\"required\":true,\"type\":\"string\",\"in\":\"query\"},{\"name\":\"y\",\"required\":true,\"type\":\"string\",\"in\":\"query\"}],\"responses\":{\"200\":{}}}},\"\\/add\":{\"get\":{\"x-auth-type\":\"Application & Application User\",\"x-throttling-tier\":\"Unlimited\",\"parameters\":[{\"name\":\"x\",\"required\":true,\"type\":\"string\",\"in\":\"query\"},{\"name\":\"y\",\"required\":true,\"type\":\"string\",\"in\":\"query\"}],\"responses\":{\"200\":{}}}}},\"swagger\":\"2.0\",\"info\":{\"title\":\"CalculatorAPI\",\"version\":\"1.0.0\"}}"
      status:
        type: string
        example: CREATED
      responseCaching:
        type: string
        example: Disabled
      cacheTimeout:
        type: integer
        example: 300
      destinationStatsEnabled:
        type: string
        example: Disabled
      isDefaultVersion:
        type: boolean
        example: false
      transport:
        description: |
          Supported transports for the API (http and/or https).
        type: array
        items:
          type: string
        example:
          - http
          - https
      tags:
        type: array
        items:
          type: string
        example:
          - substract
          - add
      tiers:
        type: array
        items:
          type: string
        example:
          - Unlimited
      thumbnailUrl:
        type: string
        example: ''
      visibility:
        type: string
        enum:
          - PUBLIC
          - PRIVATE
          - RESTRICTED
          - CONTROLLED
        example: PUBLIC
      visibleRoles:
        type: array
        items:
          type: string
        example: []
      visibleTenants:
        type: array
        items:
          type: string
        example: []
      endpointConfig:
        type: string
        example: '{"production_endpoints":{"url":"http://localhost:9763/am/sample/calculator/v1/api","config":null},"implementation_status":"managed","endpoint_type":"http"}'
      gatewayEnvironments:
        description: |
          Comma separated list of gateway environments.
        type: string
        example: Production and Sandbox
      sequences:
        type: array
        items:
          $ref: '#/definitions/Sequence'
        example: []
      subscriptionAvailability:
        type: string
        enum:
          - current_tenant
          - all_tenants
          - specific_tenants
        example: current_tenant
      subscriptionAvailableTenants:
        type: array
        items:
          type: string
        example: []
      businessInformation:
        properties:
          businessOwner:
            type: string
            example: businessowner
          businessOwnerEmail:
            type: string
            example: businessowner@wso2.com
          technicalOwner:
            type: string
            example: technicalowner
          technicalOwnerEmail:
            type: string
            example: technicalowner@wso2.com
  Application:
    title: Application
    required:
      - name
      - throttlingTier
    properties:
      applicationId:
        type: string
        example: 01234567-0123-0123-0123-012345678901
      name:
        type: string
        example: CalculatorApp
      subscriber:
        type: string
        example: admin
      throttlingTier:
        type: string
        example: Unlimited
      description:
        type: string
        example: Sample calculator application
      groupId:
        type: string
        example: ''
  DocumentList:
    title: Document List
    properties:
      count:
        type: integer
        description: |
          Number of Documents returned.
        example: 1
      next:
        type: string
        description: "Link to the next subset of resources qualified. \nEmpty if no more resources are to be returned.\n"
        example: '/apis/01234567-0123-0123-0123-012345678901/documents?limit=1&offset=2'
      previous:
        type: string
        description: "Link to the previous subset of resources qualified. \nEmpty if current subset is the first subset returned.\n"
        example: '/apis/01234567-0123-0123-0123-012345678901/documents?limit=1&offset=0'
      list:
        type: array
        items:
          $ref: '#/definitions/Document'
  Document:
    title: Document
    required:
      - name
      - type
      - sourceType
      - visibility
    properties:
      documentId:
        type: string
        example: 01234567-0123-0123-0123-012345678901
      name:
        type: string
        example: CalculatorDoc
      type:
        type: string
        enum:
          - HOWTO
          - SAMPLES
          - PUBLIC_FORUM
          - SUPPORT_FORUM
          - API_MESSAGE_FORMAT
          - SWAGGER_DOC
          - OTHER
        example: HOWTO
      summary:
        type: string
        example: Summary of Calculator Documentation
      sourceType:
        type: string
        enum:
          - INLINE
          - URL
          - FILE
        example: INLINE
      sourceUrl:
        type: string
        example: ''
      otherTypeName:
        type: string
        example: ''
      visibility:
        type: string
        enum:
          - OWNER_ONLY
          - PRIVATE
          - API_LEVEL
        example: API_LEVEL
  TierList:
    title: Tier List
    properties:
      count:
        type: integer
        description: |
          Number of Tiers returned.
        example: 1
      next:
        type: string
        description: "Link to the next subset of resources qualified. \nEmpty if no more resources are to be returned.\n"
        example: '/tiers/api?limit=1&offset=2'
      previous:
        type: string
        description: "Link to the previous subset of resources qualified. \nEmpty if current subset is the first subset returned.\n"
        example: '/tiers/api?limit=1&offset=0'
      list:
        type: array
        items:
          $ref: '#/definitions/Tier'
  Tier:
    title: Tier
    required:
      - name
      - tierPlan
      - requestCount
      - unitTime
      - stopOnQuotaReach
    properties:
      name:
        type: string
        example: Platinum
      description:
        type: string
        example: Allows 50 request(s) per minute.
      tierLevel:
        type: string
        enum:
          - api
          - application
          - resource
        example: api
      attributes:
        description: |
          Custom attributes added to the tier policy
        type: object
        additionalProperties:
          type: string
        example: {}
      requestCount:
        description: >
          Maximum number of requests which can be sent within a provided unit
          time
        type: integer
        format: int64
        example: 50
      unitTime:
        type: integer
        format: int64
        example: 60000
      tierPlan:
        description: >
          This attribute declares whether this tier is available under commercial
          or free
        type: string
        enum:
          - FREE
          - COMMERCIAL
        example: FREE
      stopOnQuotaReach:
        description: "By making this attribute to false, you are capabale of sending requests \neven if the request count exceeded within a unit time\n"
        type: boolean
        example: true
  TierPermission:
    title: tierPermission
    required:
      - permissionType
      - roles
    properties:
      permissionType:
        type: string
        enum:
          - allow
          - deny
        example: deny
      roles:
        type: array
        items:
          type: string
        example:
          - Internal/everyone
  SubscriptionList:
    title: Subscription List
    properties:
      count:
        type: integer
        description: |
          Number of Subscriptions returned.
        example: 1
      next:
        type: string
        description: "Link to the next subset of resources qualified. \nEmpty if no more resources are to be returned.\n"
        example: '/subscriptions?limit=1&offset=2&apiId=01234567-0123-0123-0123-012345678901&groupId='
      previous:
        type: string
        description: "Link to the previous subset of resources qualified. \nEmpty if current subset is the first subset returned.\n"
        example: '/subscriptions?limit=1&offset=0&apiId=01234567-0123-0123-0123-012345678901&groupId='
      list:
        type: array
        items:
          $ref: '#/definitions/Subscription'
  Subscription:
    title: Subscription
    required:
      - applicationId
      - apiIdentifier
      - tier
    properties:
      subscriptionId:
        type: string
        example: 01234567-0123-0123-0123-012345678901
      applicationId:
        type: string
        example: 01234567-0123-0123-0123-012345678901
      apiIdentifier:
        type: string
        example: 01234567-0123-0123-0123-012345678901
      tier:
        type: string
        example: Unlimited
      status:
        type: string
        enum:
          - BLOCKED
          - PROD_ONLY_BLOCKED
          - UNBLOCKED
          - ON_HOLD
          - REJECTED
        example: UNBLOCKED
  Sequence:
    title: Sequence
    required:
      - name
    properties:
      name:
        type: string
        example: log_in_message
      config:
        type: string
        example: ''
      type:
        type: string
        example: in
  Error:
    title: Error object returned with 4XX HTTP status
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int64
      message:
        type: string
        description: Error message.
      description:
        type: string
        description: |
          A detail description about the error message.
      moreInfo:
        type: string
        description: |
          Preferably an url with more details about the error.
      error:
        type: array
        description: "If there are more than one error list them out. \nFor example, list out validation errors by each field.\n"
        items:
          $ref: '#/definitions/ErrorListItem'
  ErrorListItem:
    title: Description of individual errors that may have occurred during a request.
    required:
      - code
      - message
    properties:
      code:
        type: string
      message:
        type: string
        description: |
          Description about individual errors occurred
  Environment:
    title: Environment
    required:
      - name
      - type
      - serverUrl
      - endpoints
      - showInApiConsole
    properties:
      name:
        type: string
        example: Production and Sandbox
      type:
        type: string
        example: hybrid
      serverUrl:
        type: string
        example: 'https://localhost:9443//services/'
      showInApiConsole:
        type: boolean
        example: true
      endpoints:
        $ref: '#/definitions/EnvironmentEndpoints'
  EnvironmentList:
    title: Environment List
    properties:
      count:
        type: integer
        description: |
          Number of Environments returned.
        example: 1
      list:
        type: array
        items:
          $ref: '#/definitions/Environment'
  EnvironmentEndpoints:
    title: Environment Endpoints
    properties:
      http:
        type: string
        description: HTTP environment URL
        example: 'http://localhost:8280'
      https:
        type: string
        description: HTTPS environment URL
        example: 'https://localhost:8244'
